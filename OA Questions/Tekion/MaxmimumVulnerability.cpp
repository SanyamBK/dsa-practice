#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;

bool is_possible(const vector<vector<int>>& matrix, int val) {
    int n = matrix.size();
    int m = matrix[0].size();
    vector<int> bitmasks;

    // Convert each row into a bitmask
    for (const auto& row : matrix) {
        int mask = 0;
        for (int j = 0; j < m; ++j) {
            if (row[j] >= val) {
                mask |= (1 << j);
            }
        }
        bitmasks.push_back(mask);
    }

    int full_mask = (1 << m) - 1;

    // Check all pairs of rows
    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            if ((bitmasks[i] | bitmasks[j]) == full_mask) {
                return true;
            }
        }
    }

    return false;
}

int maximize_min_of_column_max(const vector<vector<int>>& matrix) {
    set<int> unique_set;
    for (const auto& row : matrix) {
        for (int val : row) {
            unique_set.insert(val);
        }
    }

    vector<int> unique_vals(unique_set.begin(), unique_set.end());
    int low = 0, high = unique_vals.size() - 1;
    int answer = unique_vals[0];

    while (low <= high) {
        int mid = (low + high) / 2;
        int val = unique_vals[mid];
        if (is_possible(matrix, val)) {
            answer = val;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return answer;
}

int main() {
    vector<vector<int>> matrix = {
        {1, 3, 1},
        {3, 1, 1},
        {1, 2, 2},
        {1, 1, 3}
    };

    cout << maximize_min_of_column_max(matrix) << endl; // Output: 2
    return 0;
}
